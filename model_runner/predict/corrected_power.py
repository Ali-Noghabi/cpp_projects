# -*- coding: utf-8 -*-
"""
Created on Fri Jan  5 16:17:43 2024

@author: Hamideh Jafari

Crrected Power
Input: T0, P0, RH, Power, dpin, dpex, EOH
Ouput: corrected power
"""

# import numpy as np

def corrected_power(input_data, constant_param=True):
    
    T0 = input_data['T0']
    P0 = input_data['P0']
    RH = input_data['RH']
    Power = input_data['Power']
    # dp_in = input_data['dp_in']
    # dp_ex = input_data['dp_ex']
    # EOH = input_data['EOH']
    P0 = P0*1000
    K_P_T0 = (-0.000388541634376072*T0**2 - 0.638965632019722*T0 +
              109.689009934364)/100
    K_P_P0 = (0.0751117762925991*P0 + 24.0953026582946)/100
    K_P_RH = ((-9.34453988E-12*T0**4 + 5.6396416103E-10*T0**3 - 
              0.0000000110045699233*T0**2 - 2.528820719661E-08*T0 + 
              1.42503962839867E-06)*RH**2 + (-8.3979639553E-10*T0**4 + 
              4.448675997365E-08*T0**3 - 4.44606618683973E-06*T0**2 + 
              0.000033408667463544*T0 - 0.00106360277842072)*RH +
              (7.983015160029E-08*T0**4 - 4.12940280991592E-06*T0**3 + 
              0.00027803301755247*T0**2 - 0.00130752216196495*T0 +
              100.064014345876))/100
    # K_P_dpin =	((-0.000010987330610268*T0**2 - 0.000414108502636891*T0 -
    #              0.130359967036131)*dp_in + (0.0000687598125257427*T0**2 +
    #              0.00256007027006855*T0 + 100.82660490169))/100
    # K_P_dpex = ((-0.0000110568562966343*T0**2 - 0.000353917212358738*T0 -
    #              0.059471571435304)*dp_ex + (-2.01207572447792E-06*T0**2 -
    #              0.0000814608956638541*T0 + 99.999758716468))/100
    # if EOH > 1:
    #     K_P_Aging = 1-np.interp(EOH, 
    #                             [0, 12804.5, 19844.7, 29846.3, 39804.9, 47691.4, 50000, 1e+10],
    #                             [0, 4.06255, 4.54852, 4.99207, 5.2292, 5.35675, 5.38, 5.39]
    #                             )/100;
    # else:
    #     K_P_Aging = 1
                                             
    corr_power = Power/(K_P_T0*K_P_P0*K_P_RH)
    # corr_power = Power/(K_P_T0*K_P_P0*K_P_Aging*K_P_dpin*K_P_dpex*K_P_RH)
    
    return {'corr_power':corr_power}
